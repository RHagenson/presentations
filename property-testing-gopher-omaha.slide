Property Testing using Gopter
25 Sep 2018
Tags: property testing, gopter, bioinformatics

Ryan Hagenson
Bioinformatics Scientist, Omaha's Henry Doorly Zoo and Aquarium
@RAHagenson


* Definitions

_property_: a high-level attribute of one or more units

_unit_: an individual piece of a greater whole

_unit_test_: validation that a unit is fit for use

_property_test_: validation that a property holds


* Addition Example

Properties:
1. Given two positive inputs, the output should be greater than either input
2. Given two negative inputs, the output should be less than either input
3. Otherwise, output should be less than one input and greater than the other

.play -edit property-testing-gopher-omaha/main.go /^func main/,/^}/

: We could set this up as a table test, but why arbitrarily choose *a* positive and *a* negative when we know what should happen with *any* positive and *any* negative?


* Origin of Property Testing

Property testing is a functional/logical programming idea. Made popular by the QuickCheck "automatic specification-based testing" tool in Haskell.

.link https://en.wikipedia.org/wiki/QuickCheck

Property testing allows rapid, random unit testing across the entire input matrix. The previous addition example has (2^32)^2 or (2^64)^2 possible inputs depending on the word size of your machine...too many to test even for such a simple function.


* Interworkings of Property Testing

In the QuickCheck tradition, property testing frameworks try to create as many failing tests as possible. If one input fails, the framework tries to find a similar failing input.

One failed test should lead to more failed tests. All tests passing is evidence that tests "failed to fail" -- a better indicator of success than continually passing with the same known inputs.


* Gopter

Source:
.link https://github.com/leanovate/gopter

Substructure:
+ `gopter/gen`: input generators
+ `gopter/prop`: define properties
+ `gopter/arbitrary`: define arbitrary types
+ `gopter/commands`: stateful testing using arbitrary types
+ `gopter/convey`: using `gopter` inside `goconvey` tests

Only really need `gen` and `prop` as arbitrary types allow skipping invalid inputs which should be tested for error property.

: If your function is only valid for a particular input range, then outside that range should provide a helpful error (which is just another property to test).


* Gopter Steps

1. Initialize testing parameters (helpful defaults exist)
2. Define each property in turn (explanation, function, and generator)
3. Run tests (likely with `*testing.T`)

(Suggestion: override `*TestParameters.Rng` to have repeatable randomness, or use `gopter.DefaultTestParametersWithSeed(...)`)


* FizzBuzz Gopter Example

.link https://github.com/leanovate/gopter/blob/master/example_fizzbuzz_test.go

: This example lacks 100% code coverage (does not test "FizzBuzz" results).


* Addition Gopter Example

.link property-testing-gopher-omaha/addition/addition_test.go

  go test -v ./property-testing-gopher-omaha/...

* Addition Gopter Output

.link ./property-testing-gopher-omaha.slide#3 Addition Example

    === RUN   Test_Add
    + Given two positives, output is greater than either: OK, passed 100 tests.
    Elapsed time: 626.278µs
    + Given two negatives, output is less than either: OK, passed 100 tests.
    Elapsed time: 867.813µs
    + Given one negative and one positive, output should be between the: OK, passed
       100 tests.
    Elapsed time: 873.767µs
    --- PASS: Test_Add (0.00s)
    PASS
    ok  	github.com/rhagenson/presentations/property-testing-gopher-omaha/addition	0.005s

Question: What property exists that we did not test for?

: Add(0,0) does not satisfy any of the prior properties. Zero is neither negative nor positive, it is part of the trichotomy of real numbers.


* Common Properties to Test

+ Reversibility -- Given a forward and reverse function is reverse(forward(...)) always the original input?
+ Parallelizability -- Is running the unit on N goroutines stable? N^N gorountines?
+ Functional Purity -- Does the unit depend on some global state (impure) or only local state (pure)?
+ Error States (and Messages) -- Are error states and messages explanatory?
+ Initialization State -- What state is a struct initialized in?
+ State Change/Persistence -- Does the unit change some state or no?
+ Agreement Between Methodology Alternatives -- Given two functions that solve the same problem, does func1(...) == func2(...)?


* Good Property Testing Is

+ Explanatory
+ Explicit
+ Random (Predictably So)
+ Failure Driven
+ Quick


* Whole Package Example

(The Bioinformatics library I have mentioned in previous Meetups, still closed source as it is pre-v1)

  go test -v bitbucket.org/rhagenson/bigr/...


* Whole Package Output

  ?   	bitbucket.org/rhagenson/bigr	[no test files]
  ...
  === RUN   TestRnaParallelOperations
  + NewRna(s) == NewRna(s): OK, passed 100 tests.
  Elapsed time: 15.824313ms
  + seq.Reverse() == seq.Reverse(): OK, passed 100 tests.
  Elapsed time: 21.704478ms
  + seq.RevComp() == seq.RevComp(): OK, passed 100 tests.
  Elapsed time: 23.190984ms
  + seq.Complement() == seq.Complement(): OK, passed 100 tests.
  Elapsed time: 23.218992ms
  --- PASS: TestRnaParallelOperations (0.08s)
  PASS
  ok  	bitbucket.org/rhagenson/bigr/sequence	0.855s


Validates 209 units containing 76 properties at 100 tests each, for what is effectively 7,600 property tests and 133 (traditional) unit tests in approximately 1 second.
